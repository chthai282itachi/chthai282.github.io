// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.unibas.medizin.osce.domain;

import ch.unibas.medizin.osce.domain.OsceDataOnDemand;
import ch.unibas.medizin.osce.domain.OsceDay;
import java.util.List;
import java.util.Random;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect OsceDayDataOnDemand_Roo_DataOnDemand {
    
    declare @type: OsceDayDataOnDemand: @Component;
    
    private Random OsceDayDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<OsceDay> OsceDayDataOnDemand.data;
    
    @Autowired
    private OsceDataOnDemand OsceDayDataOnDemand.osceDataOnDemand;
    
    public OsceDay OsceDayDataOnDemand.getNewTransientOsceDay(int index) {
        ch.unibas.medizin.osce.domain.OsceDay obj = new ch.unibas.medizin.osce.domain.OsceDay();
        setTimeStart(obj, index);
        setTimeEnd(obj, index);
        setOsce(obj, index);
        return obj;
    }
    
    private void OsceDayDataOnDemand.setTimeStart(OsceDay obj, int index) {
        java.util.Date timeStart = new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTimeStart(timeStart);
    }
    
    private void OsceDayDataOnDemand.setTimeEnd(OsceDay obj, int index) {
        java.util.Date timeEnd = new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTimeEnd(timeEnd);
    }
    
    private void OsceDayDataOnDemand.setOsce(OsceDay obj, int index) {
        ch.unibas.medizin.osce.domain.Osce osce = osceDataOnDemand.getRandomOsce();
        obj.setOsce(osce);
    }
    
    public OsceDay OsceDayDataOnDemand.getSpecificOsceDay(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        OsceDay obj = data.get(index);
        return OsceDay.findOsceDay(obj.getId());
    }
    
    public OsceDay OsceDayDataOnDemand.getRandomOsceDay() {
        init();
        OsceDay obj = data.get(rnd.nextInt(data.size()));
        return OsceDay.findOsceDay(obj.getId());
    }
    
    public boolean OsceDayDataOnDemand.modifyOsceDay(OsceDay obj) {
        return false;
    }
    
    public void OsceDayDataOnDemand.init() {
        data = ch.unibas.medizin.osce.domain.OsceDay.findOsceDayEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'OsceDay' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<ch.unibas.medizin.osce.domain.OsceDay>();
        for (int i = 0; i < 10; i++) {
            ch.unibas.medizin.osce.domain.OsceDay obj = getNewTransientOsceDay(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
