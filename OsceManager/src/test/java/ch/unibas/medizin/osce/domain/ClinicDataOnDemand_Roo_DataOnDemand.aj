// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.unibas.medizin.osce.domain;

import ch.unibas.medizin.osce.domain.Clinic;
import java.lang.Integer;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect ClinicDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ClinicDataOnDemand: @Component;
    
    private Random ClinicDataOnDemand.rnd = new SecureRandom();
    
    private List<Clinic> ClinicDataOnDemand.data;
    
    public Clinic ClinicDataOnDemand.getNewTransientClinic(int index) {
        Clinic obj = new Clinic();
        setCity(obj, index);
        setName(obj, index);
        setPostalCode(obj, index);
        setStreet(obj, index);
        return obj;
    }
    
    public void ClinicDataOnDemand.setCity(Clinic obj, int index) {
        String city = "city_" + index;
        if (city.length() > 30) {
            city = city.substring(0, 30);
        }
        obj.setCity(city);
    }
    
    public void ClinicDataOnDemand.setName(Clinic obj, int index) {
        String name = "name_" + index;
        if (name.length() > 60) {
            name = new Random().nextInt(10) + name.substring(1, 60);
        }
        obj.setName(name);
    }
    
    public void ClinicDataOnDemand.setPostalCode(Clinic obj, int index) {
        Integer postalCode = new Integer(index);
        obj.setPostalCode(postalCode);
    }
    
    public void ClinicDataOnDemand.setStreet(Clinic obj, int index) {
        String street = "street_" + index;
        if (street.length() > 60) {
            street = street.substring(0, 60);
        }
        obj.setStreet(street);
    }
    
    public Clinic ClinicDataOnDemand.getSpecificClinic(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Clinic obj = data.get(index);
        return Clinic.findClinic(obj.getId());
    }
    
    public Clinic ClinicDataOnDemand.getRandomClinic() {
        init();
        Clinic obj = data.get(rnd.nextInt(data.size()));
        return Clinic.findClinic(obj.getId());
    }
    
    public boolean ClinicDataOnDemand.modifyClinic(Clinic obj) {
        return false;
    }
    
    public void ClinicDataOnDemand.init() {
        data = Clinic.findClinicEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Clinic' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ch.unibas.medizin.osce.domain.Clinic>();
        for (int i = 0; i < 10; i++) {
            Clinic obj = getNewTransientClinic(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
