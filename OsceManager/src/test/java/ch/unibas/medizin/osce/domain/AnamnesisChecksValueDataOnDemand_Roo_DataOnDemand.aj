// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.unibas.medizin.osce.domain;

import ch.unibas.medizin.osce.domain.AnamnesisCheckDataOnDemand;
import ch.unibas.medizin.osce.domain.AnamnesisChecksValue;
import ch.unibas.medizin.osce.domain.AnamnesisFormDataOnDemand;
import java.util.List;
import java.util.Random;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AnamnesisChecksValueDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AnamnesisChecksValueDataOnDemand: @Component;
    
    private Random AnamnesisChecksValueDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<AnamnesisChecksValue> AnamnesisChecksValueDataOnDemand.data;
    
    @Autowired
    private AnamnesisFormDataOnDemand AnamnesisChecksValueDataOnDemand.anamnesisFormDataOnDemand;
    
    @Autowired
    private AnamnesisCheckDataOnDemand AnamnesisChecksValueDataOnDemand.anamnesisCheckDataOnDemand;
    
    public AnamnesisChecksValue AnamnesisChecksValueDataOnDemand.getNewTransientAnamnesisChecksValue(int index) {
        ch.unibas.medizin.osce.domain.AnamnesisChecksValue obj = new ch.unibas.medizin.osce.domain.AnamnesisChecksValue();
        setTruth(obj, index);
        setComment(obj, index);
        setAnamnesisChecksValue(obj, index);
        setAnamnesisform(obj, index);
        setAnamnesischeck(obj, index);
        return obj;
    }
    
    private void AnamnesisChecksValueDataOnDemand.setTruth(AnamnesisChecksValue obj, int index) {
        java.lang.Boolean truth = Boolean.TRUE;
        obj.setTruth(truth);
    }
    
    private void AnamnesisChecksValueDataOnDemand.setComment(AnamnesisChecksValue obj, int index) {
        java.lang.String comment = "comment_" + index;
        if (comment.length() > 255) {
            comment = comment.substring(0, 255);
        }
        obj.setComment(comment);
    }
    
    private void AnamnesisChecksValueDataOnDemand.setAnamnesisChecksValue(AnamnesisChecksValue obj, int index) {
        java.lang.String anamnesisChecksValue = "anamnesisChecksValue_" + index;
        if (anamnesisChecksValue.length() > 255) {
            anamnesisChecksValue = anamnesisChecksValue.substring(0, 255);
        }
        obj.setAnamnesisChecksValue(anamnesisChecksValue);
    }
    
    private void AnamnesisChecksValueDataOnDemand.setAnamnesisform(AnamnesisChecksValue obj, int index) {
        ch.unibas.medizin.osce.domain.AnamnesisForm anamnesisform = anamnesisFormDataOnDemand.getRandomAnamnesisForm();
        obj.setAnamnesisform(anamnesisform);
    }
    
    private void AnamnesisChecksValueDataOnDemand.setAnamnesischeck(AnamnesisChecksValue obj, int index) {
        ch.unibas.medizin.osce.domain.AnamnesisCheck anamnesischeck = anamnesisCheckDataOnDemand.getRandomAnamnesisCheck();
        obj.setAnamnesischeck(anamnesischeck);
    }
    
    public AnamnesisChecksValue AnamnesisChecksValueDataOnDemand.getSpecificAnamnesisChecksValue(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        AnamnesisChecksValue obj = data.get(index);
        return AnamnesisChecksValue.findAnamnesisChecksValue(obj.getId());
    }
    
    public AnamnesisChecksValue AnamnesisChecksValueDataOnDemand.getRandomAnamnesisChecksValue() {
        init();
        AnamnesisChecksValue obj = data.get(rnd.nextInt(data.size()));
        return AnamnesisChecksValue.findAnamnesisChecksValue(obj.getId());
    }
    
    public boolean AnamnesisChecksValueDataOnDemand.modifyAnamnesisChecksValue(AnamnesisChecksValue obj) {
        return false;
    }
    
    public void AnamnesisChecksValueDataOnDemand.init() {
        data = ch.unibas.medizin.osce.domain.AnamnesisChecksValue.findAnamnesisChecksValueEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'AnamnesisChecksValue' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<ch.unibas.medizin.osce.domain.AnamnesisChecksValue>();
        for (int i = 0; i < 10; i++) {
            ch.unibas.medizin.osce.domain.AnamnesisChecksValue obj = getNewTransientAnamnesisChecksValue(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
