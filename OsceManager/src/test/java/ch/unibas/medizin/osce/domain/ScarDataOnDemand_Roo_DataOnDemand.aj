// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.unibas.medizin.osce.domain;

import ch.unibas.medizin.osce.domain.Scar;
import ch.unibas.medizin.osce.shared.TraitTypes;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect ScarDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ScarDataOnDemand: @Component;
    
    private Random ScarDataOnDemand.rnd = new SecureRandom();
    
    private List<Scar> ScarDataOnDemand.data;
    
    public Scar ScarDataOnDemand.getNewTransientScar(int index) {
        Scar obj = new Scar();
        setBodypart(obj, index);
        setTraitType(obj, index);
        return obj;
    }
    
    public void ScarDataOnDemand.setBodypart(Scar obj, int index) {
        String bodypart = "bodypart_" + index;
        if (bodypart.length() > 60) {
            bodypart = bodypart.substring(0, 60);
        }
        obj.setBodypart(bodypart);
    }
    
    public void ScarDataOnDemand.setTraitType(Scar obj, int index) {
        TraitTypes traitType = TraitTypes.class.getEnumConstants()[0];
        obj.setTraitType(traitType);
    }
    
    public Scar ScarDataOnDemand.getSpecificScar(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Scar obj = data.get(index);
        return Scar.findScar(obj.getId());
    }
    
    public Scar ScarDataOnDemand.getRandomScar() {
        init();
        Scar obj = data.get(rnd.nextInt(data.size()));
        return Scar.findScar(obj.getId());
    }
    
    public boolean ScarDataOnDemand.modifyScar(Scar obj) {
        return false;
    }
    
    public void ScarDataOnDemand.init() {
        data = Scar.findScarEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Scar' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ch.unibas.medizin.osce.domain.Scar>();
        for (int i = 0; i < 10; i++) {
            Scar obj = getNewTransientScar(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
