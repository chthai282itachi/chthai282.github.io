// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.unibas.medizin.osce.domain;

import ch.unibas.medizin.osce.domain.AdministratorDataOnDemand;
import ch.unibas.medizin.osce.domain.Task;
import java.util.List;
import java.util.Random;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect TaskDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TaskDataOnDemand: @Component;
    
    private Random TaskDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<Task> TaskDataOnDemand.data;
    
    @Autowired
    private AdministratorDataOnDemand TaskDataOnDemand.administratorDataOnDemand;
    
    public Task TaskDataOnDemand.getNewTransientTask(int index) {
        ch.unibas.medizin.osce.domain.Task obj = new ch.unibas.medizin.osce.domain.Task();
        setName(obj, index);
        setDeadline(obj, index);
        setIsDone(obj, index);
        setOsce(obj, index);
        setAdministrator(obj, index);
        return obj;
    }
    
    private void TaskDataOnDemand.setName(Task obj, int index) {
        java.lang.String name = "name_" + index;
        if (name.length() > 255) {
            name = name.substring(0, 255);
        }
        obj.setName(name);
    }
    
    private void TaskDataOnDemand.setDeadline(Task obj, int index) {
        java.util.Date deadline = new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDeadline(deadline);
    }
    
    private void TaskDataOnDemand.setIsDone(Task obj, int index) {
        java.lang.Boolean isDone = Boolean.TRUE;
        obj.setIsDone(isDone);
    }
    
    private void TaskDataOnDemand.setOsce(Task obj, int index) {
        ch.unibas.medizin.osce.domain.Task osce = obj;
        obj.setOsce(osce);
    }
    
    private void TaskDataOnDemand.setAdministrator(Task obj, int index) {
        ch.unibas.medizin.osce.domain.Administrator administrator = administratorDataOnDemand.getRandomAdministrator();
        obj.setAdministrator(administrator);
    }
    
    public Task TaskDataOnDemand.getSpecificTask(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Task obj = data.get(index);
        return Task.findTask(obj.getId());
    }
    
    public Task TaskDataOnDemand.getRandomTask() {
        init();
        Task obj = data.get(rnd.nextInt(data.size()));
        return Task.findTask(obj.getId());
    }
    
    public boolean TaskDataOnDemand.modifyTask(Task obj) {
        return false;
    }
    
    public void TaskDataOnDemand.init() {
        data = ch.unibas.medizin.osce.domain.Task.findTaskEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Task' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<ch.unibas.medizin.osce.domain.Task>();
        for (int i = 0; i < 10; i++) {
            ch.unibas.medizin.osce.domain.Task obj = getNewTransientTask(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
