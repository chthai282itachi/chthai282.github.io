// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.unibas.medizin.osce.domain;

import ch.unibas.medizin.osce.domain.Course;
import ch.unibas.medizin.osce.domain.OsceDataOnDemand;
import java.util.List;
import java.util.Random;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect CourseDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CourseDataOnDemand: @Component;
    
    private Random CourseDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<Course> CourseDataOnDemand.data;
    
    @Autowired
    private OsceDataOnDemand CourseDataOnDemand.osceDataOnDemand;
    
    public Course CourseDataOnDemand.getNewTransientCourse(int index) {
        ch.unibas.medizin.osce.domain.Course obj = new ch.unibas.medizin.osce.domain.Course();
        setColor(obj, index);
        setOsce(obj, index);
        return obj;
    }
    
    private void CourseDataOnDemand.setColor(Course obj, int index) {
        java.lang.String color = "color_" + index;
        obj.setColor(color);
    }
    
    private void CourseDataOnDemand.setOsce(Course obj, int index) {
        ch.unibas.medizin.osce.domain.Osce osce = osceDataOnDemand.getRandomOsce();
        obj.setOsce(osce);
    }
    
    public Course CourseDataOnDemand.getSpecificCourse(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Course obj = data.get(index);
        return Course.findCourse(obj.getId());
    }
    
    public Course CourseDataOnDemand.getRandomCourse() {
        init();
        Course obj = data.get(rnd.nextInt(data.size()));
        return Course.findCourse(obj.getId());
    }
    
    public boolean CourseDataOnDemand.modifyCourse(Course obj) {
        return false;
    }
    
    public void CourseDataOnDemand.init() {
        data = ch.unibas.medizin.osce.domain.Course.findCourseEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Course' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<ch.unibas.medizin.osce.domain.Course>();
        for (int i = 0; i < 10; i++) {
            ch.unibas.medizin.osce.domain.Course obj = getNewTransientCourse(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
