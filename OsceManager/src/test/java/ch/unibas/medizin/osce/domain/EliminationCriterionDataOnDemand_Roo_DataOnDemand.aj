// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.unibas.medizin.osce.domain;

import ch.unibas.medizin.osce.domain.AnamnesisCheck;
import ch.unibas.medizin.osce.domain.AnamnesisCheckDataOnDemand;
import ch.unibas.medizin.osce.domain.EliminationCriterion;
import ch.unibas.medizin.osce.domain.Scar;
import ch.unibas.medizin.osce.domain.ScarDataOnDemand;
import ch.unibas.medizin.osce.domain.StandardizedRole;
import ch.unibas.medizin.osce.domain.StandardizedRoleDataOnDemand;
import java.lang.Boolean;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect EliminationCriterionDataOnDemand_Roo_DataOnDemand {
    
    declare @type: EliminationCriterionDataOnDemand: @Component;
    
    private Random EliminationCriterionDataOnDemand.rnd = new SecureRandom();
    
    private List<EliminationCriterion> EliminationCriterionDataOnDemand.data;
    
    @Autowired
    private AnamnesisCheckDataOnDemand EliminationCriterionDataOnDemand.anamnesisCheckDataOnDemand;
    
    @Autowired
    private ScarDataOnDemand EliminationCriterionDataOnDemand.scarDataOnDemand;
    
    @Autowired
    private StandardizedRoleDataOnDemand EliminationCriterionDataOnDemand.standardizedRoleDataOnDemand;
    
    public EliminationCriterion EliminationCriterionDataOnDemand.getNewTransientEliminationCriterion(int index) {
        EliminationCriterion obj = new EliminationCriterion();
        setAnamnesisCheck(obj, index);
        setAnamnesisCheckValue(obj, index);
        setScar(obj, index);
        setStandardizedRole(obj, index);
        return obj;
    }
    
    public void EliminationCriterionDataOnDemand.setAnamnesisCheck(EliminationCriterion obj, int index) {
        AnamnesisCheck anamnesisCheck = anamnesisCheckDataOnDemand.getRandomAnamnesisCheck();
        obj.setAnamnesisCheck(anamnesisCheck);
    }
    
    public void EliminationCriterionDataOnDemand.setAnamnesisCheckValue(EliminationCriterion obj, int index) {
        Boolean anamnesisCheckValue = Boolean.TRUE;
        obj.setAnamnesisCheckValue(anamnesisCheckValue);
    }
    
    public void EliminationCriterionDataOnDemand.setScar(EliminationCriterion obj, int index) {
        Scar scar = scarDataOnDemand.getRandomScar();
        obj.setScar(scar);
    }
    
    public void EliminationCriterionDataOnDemand.setStandardizedRole(EliminationCriterion obj, int index) {
        StandardizedRole standardizedRole = standardizedRoleDataOnDemand.getRandomStandardizedRole();
        obj.setStandardizedRole(standardizedRole);
    }
    
    public EliminationCriterion EliminationCriterionDataOnDemand.getSpecificEliminationCriterion(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        EliminationCriterion obj = data.get(index);
        return EliminationCriterion.findEliminationCriterion(obj.getId());
    }
    
    public EliminationCriterion EliminationCriterionDataOnDemand.getRandomEliminationCriterion() {
        init();
        EliminationCriterion obj = data.get(rnd.nextInt(data.size()));
        return EliminationCriterion.findEliminationCriterion(obj.getId());
    }
    
    public boolean EliminationCriterionDataOnDemand.modifyEliminationCriterion(EliminationCriterion obj) {
        return false;
    }
    
    public void EliminationCriterionDataOnDemand.init() {
        data = EliminationCriterion.findEliminationCriterionEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'EliminationCriterion' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ch.unibas.medizin.osce.domain.EliminationCriterion>();
        for (int i = 0; i < 10; i++) {
            EliminationCriterion obj = getNewTransientEliminationCriterion(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
